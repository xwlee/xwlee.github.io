{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/setup-an-elk-stack-using-aws-cdk",
    "result": {"data":{"post":{"slug":"/setup-an-elk-stack-using-aws-cdk","title":"Setup an ELK stack using AWS CDK","date":"13.01.2022","tags":[{"name":"aws","slug":"aws"},{"name":"awscdk","slug":"awscdk"},{"name":"typescript","slug":"typescript"},{"name":"elasticsearch","slug":"elasticsearch"}],"description":null,"canonicalUrl":"https://xwlee.github.io/setup-an-elk-stack-using-cdk","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setup an ELK stack using AWS CDK\",\n  \"date\": \"2022-01-13T00:00:00.000Z\",\n  \"tags\": [\"aws\", \"awscdk\", \"typescript\", \"elasticsearch\"],\n  \"canonicalUrl\": \"https://xwlee.github.io/setup-an-elk-stack-using-cdk\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Prerequisites\"), mdx(\"p\", null, \"Make sure you have installed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Node.js\"), \" 10.13.0 or later.\"), mdx(\"p\", null, \"Make sure you have configured your workstation with your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aws_access_key_id\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aws_secret_access_key\"), \". If you have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWS CLI\"), \" installed, run the following command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# Provide your AWS access key ID, secret access key, and default region when prompted.\\naws configure\\n\")), mdx(\"p\", null, \"Make sure you have installed the AWS CDK Toolkit globally.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm install -g aws-cdk\\ncdk --version\\n\")), mdx(\"h2\", null, \"Initial Setup\"), mdx(\"p\", null, \"In this tutorial, we will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \" for the demo.\"), mdx(\"p\", null, \"Let's initialize an empty AWS CDK project.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"mkdir cdk-elk && cd $_\\ncdk init app --language typescript\\n\")), mdx(\"p\", null, \"Run the following command to verify that everything works correctly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"npm run cdk synth\\n\")), mdx(\"p\", null, \"This will output an empty CloudFormation template inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cdk.out\"), \" folder. You should see a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CdkElkStack.template.json\"), \" created.\"), mdx(\"h2\", null, \"Boostraping\"), mdx(\"p\", null, \"Provision resources the AWS CDK needs to perform the deployment, e.g S3 bucket\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ cdk bootstrap\\n \\u23F3  Bootstrapping environment aws://111111111111/ap-southeast-1...\\nTrusted accounts for deployment: (none)\\nTrusted accounts for lookup: (none)\\nUsing default execution policy of 'arn:aws:iam::aws:policy/AdministratorAccess'. Pass '--cloudformation-execution-policies' to customize.\\n \\u2705  Environment aws://111111111111/ap-southeast-1 bootstrapped (no changes).\\n\")), mdx(\"h2\", null, \"Create a AWS Cognito User Pool\"), mdx(\"p\", null, \"Add an import statement at the beginning of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/cdk-elk-stack.ts\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{3,9-25}\",\n    \"{3,9-25}\": true\n  }, \"import { Stack, StackProps } from \\\"aws-cdk-lib\\\";\\nimport { Construct } from \\\"constructs\\\";\\nimport * as cognito from \\\"aws-cdk-lib/aws-cognito\\\";\\n\\nexport class CdkElkStack extends Stack {\\n  constructor(scope: Construct, id: string, props?: StackProps) {\\n    super(scope, id, props);\\n\\n    const userPool = new cognito.UserPool(this, \\\"UserPool\\\", {\\n      userPoolName: `${Stack.of(this).stackName}UserPool`,\\n      autoVerify: {\\n        email: true,\\n      },\\n      standardAttributes: {\\n        email: {\\n          mutable: true,\\n          required: true,\\n        },\\n      },\\n    });\\n    userPool.addDomain(\\\"UserPoolDomain\\\", {\\n      cognitoDomain: {\\n        domainPrefix: \\\"cdk-elk\\\",\\n      },\\n    });\\n  }\\n}\\n\")), mdx(\"p\", null, \"A user pool is a user directory that stores your users that use to login to Kibana. We also need to specify the domain prefix for the Cognito login URL.\"), mdx(\"h2\", null, \"Create a AWS Cognito Identity Pool\"), mdx(\"p\", null, \"Note: Here we omit the code to create user pool\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{11-41}\",\n    \"{11-41}\": true\n  }, \"import { Stack, StackProps } from \\\"aws-cdk-lib\\\";\\nimport { Construct } from \\\"constructs\\\";\\nimport * as cognito from \\\"aws-cdk-lib/aws-cognito\\\";\\n\\nexport class CdkElkStack extends Stack {\\n  constructor(scope: Construct, id: string, props?: StackProps) {\\n    super(scope, id, props);\\n\\n    // User pool ...\\n\\n    const identityPool = new cognito.CfnIdentityPool(this, \\\"IdentityPool\\\", {\\n      identityPoolName: `${Stack.of(this).stackName}IdentityPool`,\\n      allowUnauthenticatedIdentities: false,\\n    });\\n\\n    // See https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html\\n    const authenticatedRole = new iam.Role(this, \\\"AuthenticatedRole\\\", {\\n      assumedBy: new iam.FederatedPrincipal(\\n        \\\"cognito-identity.amazonaws.com\\\",\\n        {\\n          StringEquals: {\\n            \\\"cognito-identity.amazonaws.com:aud\\\": identityPool.ref,\\n          },\\n          \\\"ForAnyValue:StringLike\\\": {\\n            \\\"cognito-identity.amazonaws.com:amr\\\": \\\"authenticated\\\",\\n          },\\n        },\\n        \\\"sts:AssumeRoleWithWebIdentity\\\"\\n      ),\\n    });\\n\\n    new cognito.CfnIdentityPoolRoleAttachment(\\n      this,\\n      \\\"IdentityPoolRoleAttachment\\\",\\n      {\\n        identityPoolId: identityPool.ref,\\n        roles: {\\n          authenticated: authenticatedRole.roleArn,\\n        },\\n      }\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"A few things to notice:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identity pool creates unique identities for the authenticated user and attaches a role to that user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The role defines the permissions to access the AWS resources.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both user pool & identity pool will be used when we define the ES domain.\")), mdx(\"h2\", null, \"Create an ES domain\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{4-7,17-57}\",\n    \"{4-7,17-57}\": true\n  }, \"import { Stack, StackProps } from \\\"aws-cdk-lib\\\";\\nimport { Construct } from \\\"constructs\\\";\\nimport * as cognito from \\\"aws-cdk-lib/aws-cognito\\\";\\nimport * as iam from \\\"aws-cdk-lib/aws-iam\\\";\\nimport * as es from \\\"aws-cdk-lib/aws-elasticsearch\\\";\\nimport { EbsDeviceVolumeType } from \\\"aws-cdk-lib/aws-ec2\\\";\\nimport { ArnPrincipal, Effect } from \\\"aws-cdk-lib/aws-iam\\\";\\n\\nexport class CdkElkStack extends Stack {\\n  constructor(scope: Construct, id: string, props?: StackProps) {\\n    super(scope, id, props);\\n\\n    // User pool ...\\n\\n    // Identity pool ...\\n\\n    // Allow Amazon ES to access Cognito\\n    const esRole = new iam.Role(this, \\\"EsRole\\\", {\\n      assumedBy: new iam.ServicePrincipal(\\\"es.amazonaws.com\\\"),\\n    });\\n    esRole.addManagedPolicy({\\n      managedPolicyArn: \\\"arn:aws:iam::aws:policy/AmazonESCognitoAccess\\\",\\n    });\\n\\n    const domain = new es.Domain(this, \\\"Elasticsearch\\\", {\\n      domainName: \\\"cdk-elk\\\",\\n      version: es.ElasticsearchVersion.V7_10,\\n      enableVersionUpgrade: true, // This allow in-place Elasticsearch version upgrade\\n      capacity: {\\n        dataNodeInstanceType: \\\"t3.small.elasticsearch\\\",\\n        dataNodes: 1, // For testing purpose, we only create 1 instance\\n      },\\n      ebs: {\\n        // Attach a 30GB GP2 volume\\n        enabled: true,\\n        volumeSize: 30,\\n        volumeType: EbsDeviceVolumeType.GP2,\\n      },\\n      accessPolicies: [\\n        // Allow authenticated users to access Kibana\\n        new iam.PolicyStatement({\\n          effect: Effect.ALLOW,\\n          principals: [new ArnPrincipal(authenticatedRole.roleArn)],\\n          actions: [\\\"es:ESHttp*\\\"],\\n          resources: [\\n            `arn:aws:es:${Stack.of(this).region}:${\\n              Stack.of(this).account\\n            }:domain/cdk-elk/*`,\\n          ],\\n        }),\\n      ],\\n      cognitoKibanaAuth: {\\n        userPoolId: userPool.userPoolId,\\n        identityPoolId: identityPool.ref,\\n        role: esRole,\\n      },\\n    });\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Prerequisites Make sure you have installed  Node.js  10.13.0 or later. Make sure you have configured your workstation with your  aws_access…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/setup-an-elk-stack-using-aws-cdk","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}