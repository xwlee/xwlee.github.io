{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/extending-type-script-global-object-in-node-js","result":{"data":{"post":{"slug":"/extending-type-script-global-object-in-node-js","title":"Extending TypeScript Global Object in NodeJS","date":"12.05.2021","tags":[{"name":"nodejs","slug":"nodejs"},{"name":"typescript","slug":"typescript"},{"name":"global","slug":"global"}],"description":null,"canonicalUrl":"https://xwlee.github.io/extending-type-script-global-object-in-node-js","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Extending TypeScript Global Object in NodeJS\",\n  \"date\": \"2021-05-12T00:00:00.000Z\",\n  \"tags\": [\"nodejs\", \"typescript\", \"global\"],\n  \"canonicalUrl\": \"https://xwlee.github.io/extending-type-script-global-object-in-node-js\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You want to add a function to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" object in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodeJS\"), \" environment\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"type MyFunctionType = () => void;\\n\\nglobal.myFunctionName = () => {\\n  console.log(\\\"hi\\\");\\n};\\n\")), mdx(\"p\", null, \"To extends \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" object in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TypeScript\"), \", you need to augment the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" namespaces\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"declare global {\\n  namespace NodeJS {\\n    interface Global {\\n      myFunctionName: MyFunctionType\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"With this in place, you now can call the function like this\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"global.myFunctionName();\\n\")), mdx(\"p\", null, \"To call the function without \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global.\"), \", you need to augment the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"globalThis\"), \" type\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{8-10}\",\n    \"{8-10}\": true\n  }, \"declare global {\\n  namespace NodeJS {\\n    interface Global {\\n      myFunctionName: MyFunctionType\\n    }\\n  }\\n\\n  namespace globalThis {\\n    const myFunctionName: MyFunctionType\\n  }\\n}\\n\")), mdx(\"p\", null, \"With this in place, you now can call the function like this\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"myFunctionName();\\n\")), mdx(\"p\", null, \"That's it. Thanks for reading.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"You want to add a function to  global  object in  NodeJS  environment To extends  global  object in  TypeScript , you need to augment theâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/extending-type-script-global-object-in-node-js","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}