{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-extending-global-object-in-typescript-index-mdx-4d5d7abe077f98bc98d0.js","mappings":"gNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iCAAkCK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,cAAeI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,gBAAiB,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAC/VK,UAAW,eACV,qGAAwG,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,cAAeK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,cAAeI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,cAAe,6BAA8BI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,UAAW,eAAgB,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CACpeK,UAAW,eACV,0HAA2H,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+DAAgE,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAClUK,UAAW,eACV,+BAAgC,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gCAAiCK,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,WAAY,6BAA8BI,EAAAA,cAAoBR,EAAYI,KAAM,KAAM,cAAe,SAAU,KAAMI,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAMH,OAAOC,OAAO,CACjXO,UAAW,eACV,CACD,QAAQ,IACN,qMAAsM,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+DAAgE,KAAMK,EAAAA,cAAoBR,EAAYK,IAAK,KAAMG,EAAAA,cAAoBR,EAAYI,KAAM,CAC9YK,UAAW,eACV,wBAAyB,KAAMD,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kCAC7E,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,SCtBe,SAASa,EAAiBb,GACvC,OAAOS,EAAAA,cAAoBK,EAAAA,EAAed,EAAOS,EAAAA,cAAoBM,EAAqBf,GAC5F,CAHAc,EAAAA,C","sources":["webpack://minimal-blog/./content/posts/extending-global-object-in-typescript/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"You want to add a function to \", React.createElement(_components.code, null, \"global\"), \" object in \", React.createElement(_components.code, null, \"NodeJS\"), \" environment\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"type MyFunctionType = () => void;\\n\\nglobal.myFunctionName = () => {\\n  console.log(\\\"hi\\\");\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"To extends \", React.createElement(_components.code, null, \"global\"), \" object in \", React.createElement(_components.code, null, \"TypeScript\"), \", you need to augment the \", React.createElement(_components.code, null, \"global\"), \" namespaces\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"declare global {\\n  namespace NodeJS {\\n    interface Global {\\n      myFunctionName: MyFunctionType\\n    }\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With this in place, you now can call the function like this\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"global.myFunctionName();\\n\")), \"\\n\", React.createElement(_components.p, null, \"To call the function without \", React.createElement(_components.code, null, \"global.\"), \", you need to augment the \", React.createElement(_components.code, null, \"globalThis\"), \" type\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, Object.assign({\n    className: \"language-js\"\n  }, {\n    \"8-10\": true\n  }), \"declare global {\\n  namespace NodeJS {\\n    interface Global {\\n      myFunctionName: MyFunctionType\\n    }\\n  }\\n\\n  namespace globalThis {\\n    const myFunctionName: MyFunctionType\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With this in place, you now can call the function like this\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"myFunctionName();\\n\")), \"\\n\", React.createElement(_components.p, null, \"That's it. Thanks for reading.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/blog/blog/content/posts/extending-global-object-in-typescript/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}