"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[603],{2339:function(n,e,t){t.r(e),t.d(e,{Head:function(){return u.F},default:function(){return o}});var r=t(7294),l=t(1151);function a(n){const e=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,l.ah)(),n.components);return r.createElement(r.Fragment,null,r.createElement(e.h2,null,"Method 1"),"\n",r.createElement(e.p,null,"Uses a loop and eagerly (aka, immediately) calculates the result of one call to pass into the next call."),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-js"},"function compose(...fns) {\n  return function composed(result) {\n    // Copy the array of functions\n    var list = [...fns];\n\n    while (list.length > 0) {\n      // Take the last function off the end of the list\n      // and execute it\n      result = list.pop()(result);\n    }\n\n    return result;\n  };\n}\n")),"\n",r.createElement(e.h2,null,"Method 2"),"\n",r.createElement(e.p,null,"Using ",r.createElement(e.code,null,"reduce(..)"),"."),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-js"},"function compose(...fns) {\n  return function composed(result) {\n    return [...fns].reverse().reduce(function reducer(result, fn) {\n      return fn(result);\n    }, result);\n  };\n}\n")),"\n",r.createElement(e.h2,null,"Method 3"),"\n",r.createElement(e.p,null,"Still use ",r.createElement(e.code,null,"reduce(..)"),", but produce a lazy evaluation function wrapping. We return the result of the ",r.createElement(e.code,null,"reduce(..)")," call directly, which is itself a function, not a computed result."),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-js"},"function compose(...fns) {\n  return fns.reverse().reduce(function reducer(fn1, fn2) {\n    return function composed(...args) {\n      return fn2(fn1(...args));\n    };\n  });\n}\n")),"\n",r.createElement(e.p,null,"The produced wrapped function was similar to the one composed manually below:"),"\n",r.createElement(e.pre,null,r.createElement(e.code,{className:"language-js"},'// Here we compose 4 functions manually.\n\n// The first function can accept multiple argument\nvar fn1 = (...arg) => {\n  console.log("fn1", arg);\n  return arg;\n};\n\n// Add 2 to each number\nvar fn2 = (arg) => {\n  console.log("fn2", arg);\n  return arg.map((x) => x + x);\n};\n\n// Multiply each number by 2\nvar fn3 = (arg) => {\n  console.log("fn3", arg);\n  return arg.map((x) => x * x);\n};\n\nvar fn4 = (arg) => {\n  console.log("fn4", arg);\n  return arg;\n};\n\nvar myFn = function composed(...args) {\n  return fn4(\n    (function composed(...args) {\n      return fn3(\n        (function composed(...args) {\n          return fn2(fn1(...args));\n        })(...args)\n      );\n    })(...args)\n  );\n};\nmyFn(1, 2, 3); // [4, 16, 36]\n')))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?r.createElement(e,n,r.createElement(a,n)):a(n)},u=t(534);function o(n){return r.createElement(u.Z,n,r.createElement(c,n))}u.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-function-composition-index-mdx-c82214b367598f9024d9.js.map